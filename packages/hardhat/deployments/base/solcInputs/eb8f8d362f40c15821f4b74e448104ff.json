{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/dex/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.26;\n\ninterface IUniswapV2Factory {\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint256\n    );\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(\n        address tokenA,\n        address tokenB\n    ) external view returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(\n        address tokenA,\n        address tokenB\n    ) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/dex/interfaces/IUniswapV2Router.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.26;\n\nimport {IUniswapV2Router01} from \"./IUniswapV2Router01.sol\";\n\ninterface IUniswapV2Router is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"
    },
    "contracts/dex/interfaces/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity 0.8.26;\n\n//solhint-disable func-name-mixedcase\n\ninterface IUniswapV2Router01 {\n    function factory() external view returns (address);\n\n    function WETH() external view returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(\n        uint256 amountIn,\n        address[] calldata path\n    ) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(\n        uint256 amountOut,\n        address[] calldata path\n    ) external view returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/EthToTokenSale.sol": {
      "content": "//SPDX-License-Identifier: MIT\n//Compatible with OpenZeppelin Contracts ^5.0.0\n\npragma solidity 0.8.26;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./dex/interfaces/IUniswapV2Router.sol\";\nimport \"./dex/interfaces/IUniswapV2Factory.sol\";\n//No reentrancy guard\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MedalSale is ReentrancyGuard, Ownable {\n\taddress payable public constant platformFeeDestination =\n\t\tpayable(0xf87Eaea53f15189385a5fb33b6Ad0c61C6047d47);\n\taddress payable public constant medalTreasury =\n\t\tpayable(0xC3Cc6d2db567aF6669beC02c8084E71B1714643a);\n\n\tIERC20 public immutable medal;\n\n\tmapping(address => uint256) public addressEthSpent;\n\tmapping(address => uint256) public addressBonusEarned;\n\n\taddress[] public buyers;\n\n\tuint256 public constant tokensAvailable = 20_000_000 * 10 ** 18; // 20% of the tokenSupply to be sold\n\tuint256 public constant softCap = 400 ether; // 400 ETH\n\n\tmapping(address => bool) public bonusWhitelist; // Holders of $PEOPLE, $DOG and $JENNER get a 25% bonus on their ETH Spent\n\tuint256 public bonusEthSpent;\n\tuint256 public ethRaised;\n\n\tuint256 public tokensPerEth;\n\n\tenum Status {\n\t\tNOT_STARTED,\n\t\tSTARTED,\n\t\tCLOSED,\n\t\tDISTRIBUTION,\n\t\tREFUNDING\n\t}\n\n\tStatus public saleStatus;\n\n\tuint256 public saleEndTime = 1724328000; // Thursday, 22 August 2024 12:00:00 GMT\n\n\tevent Bought(address buyer, uint256 amount);\n\n\tevent Withdrawn(address buyer, uint256 amount);\n\tevent SaleComplete(uint256 tokensPerEth);\n\n\tconstructor(address _medal) Ownable(msg.sender) {\n\t\tmedal = IERC20(_medal);\n\t}\n\n\tfunction buyersLength() public view returns (uint256) {\n\t\treturn buyers.length;\n\t}\n\n\tfunction buyTokens() public payable {\n\t\t_buyTokens(msg.sender);\n\t}\n\n\treceive() external payable {\n\t\t_buyTokens(msg.sender);\n\t}\n\n\t///@param _endTime Duration of the sale in unix timestamp\n\n\tfunction changeEndTime(uint256 _endTime) public onlyOwner {\n\t\trequire(saleStatus != Status.CLOSED, \"Sale cannot be closed\");\n\t\tsaleEndTime = _endTime;\n\t}\n\tfunction openSale() public onlyOwner {\n\t\trequire(saleStatus == Status.NOT_STARTED, \"Sale has already started\");\n\t\tsaleStatus = Status.STARTED;\n\t}\n\n\tfunction closeSale() public onlyOwner {\n\t\trequire(saleStatus == Status.STARTED, \"Sale must be active\");\n\t\trequire(block.timestamp >= saleEndTime, \"Sale time needs to elapse\");\n\t\trequire(\n\t\t\taddress(this).balance >= softCap,\n\t\t\t\"Auction reserve not reached\"\n\t\t);\n\t\tsaleStatus = Status.CLOSED;\n\t\tuint256 _ethRaised = address(this).balance + bonusEthSpent;\n\t\tethRaised = address(this).balance;\n\t\ttokensPerEth = tokensAvailable / _ethRaised; //Safe to assume we won't have more than 20M ETH raised\n\n\t\temit SaleComplete(tokensPerEth);\n\t}\n\n\tfunction _buyTokens(address _buyer) public payable nonReentrant {\n\t\t//Checks\n\t\trequire(saleStatus == Status.STARTED, \"Sale is not active\");\n\t\trequire(block.timestamp < saleEndTime, \"Sale time has elapsed\");\n\t\trequire(msg.value > 0, \"No ETH sent\");\n\n\t\t//Check if user is in the bonus whitelist\n\n\t\t//User effects\n\t\tuint256 _totalContribution = msg.value;\n\t\tif (bonusWhitelist[_buyer]) {\n\t\t\tuint256 _bonus = msg.value / 4;\n\t\t\taddressEthSpent[_buyer] += msg.value;\n\t\t\taddressBonusEarned[_buyer] += _bonus;\n\t\t\tbonusEthSpent += _bonus;\n\t\t\t_totalContribution += _bonus;\n\t\t} else {\n\t\t\taddressEthSpent[_buyer] += msg.value;\n\t\t}\n\n\t\tuint256 _buyersLength = buyers.length;\n\t\tif (_buyersLength == 0) {\n\t\t\tbuyers.push(_buyer);\n\t\t} else {\n\t\t\tfor (uint256 i; i < _buyersLength; ++i) {\n\t\t\t\tif (buyers[i] == _buyer) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (i == _buyersLength - 1) {\n\t\t\t\t\tbuyers.push(_buyer);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\temit Bought(_buyer, _totalContribution);\n\t}\n\n\tfunction claimFractions() public {\n\t\t//When sale is closed allow users to claim their fraction of the medal\n\t\trequire(saleStatus == Status.CLOSED, \"Sale is not complete\");\n\t\tuint256 _allocation = (addressEthSpent[msg.sender] +\n\t\t\taddressBonusEarned[msg.sender]) * tokensPerEth;\n\t\trequire(_allocation > 0, \"No tokens to claim\");\n\t\taddressEthSpent[msg.sender] = 0;\n\t\taddressBonusEarned[msg.sender] = 0;\n\t\tmedal.transfer(msg.sender, _allocation);\n\t\temit Withdrawn(msg.sender, _allocation);\n\t}\n\n\tfunction allowRefunds() public onlyOwner {\n\t\trequire(saleStatus == Status.STARTED, \"Sale must be ongoing\");\n\t\tsaleStatus = Status.REFUNDING;\n\t}\n\n\tfunction resetSale() public onlyOwner {\n\t\tsaleStatus = Status.NOT_STARTED;\n\t}\n\n\tfunction refund() public nonReentrant {\n\t\trequire(saleStatus == Status.REFUNDING, \"Refunds are not allowed\");\n\t\tuint256 _ethSpent = addressEthSpent[msg.sender];\n\t\trequire(_ethSpent > 0, \"No ETH to refund\");\n\t\taddressEthSpent[msg.sender] = 0;\n\t\taddressBonusEarned[msg.sender] = 0;\n\t\tpayable(msg.sender).transfer(_ethSpent);\n\t}\n\n\tfunction addToBonusWhitelist(address _address) public onlyOwner {\n\t\tbonusWhitelist[_address] = true;\n\t}\n\n\tfunction addBatchToBonusWhitelist(\n\t\taddress[] memory _addresses\n\t) public onlyOwner {\n\t\tfor (uint256 i; i < _addresses.length; ++i) {\n\t\t\tbonusWhitelist[_addresses[i]] = true;\n\t\t}\n\t}\n\n\tfunction withdrawEth() public onlyOwner {\n\t\trequire(saleStatus == Status.CLOSED, \"Sale must be complete\");\n\t\tuint256 _ethRaised = address(this).balance;\n\t\tplatformFeeDestination.transfer(_ethRaised / 5); // 20% of the total ETH raised\n\t\tmedalTreasury.transfer(address(this).balance);\n\t}\n\n\tfunction sweepTokens() public onlyOwner {\n\t\tuint256 _balance = medal.balanceOf(address(this));\n\t\tif (saleStatus == Status.NOT_STARTED) {\n\t\t\t//If the sale has not started, return the tokens to the treasury\n\t\t\tmedal.transfer(msg.sender, _balance);\n\t\t} else {\n\t\t\t//Wait for at least 30 days after the sale is complete\n\t\t\trequire(\n\t\t\t\tblock.timestamp >= saleEndTime + 30 days,\n\t\t\t\t\"Cannot sweep tokens yet\"\n\t\t\t);\n\t\t\tmedal.transfer(msg.sender, _balance);\n\t\t}\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}